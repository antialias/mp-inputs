include ../insights-learn/tooltip.jade

- const open = $helpers.isPaneOpen()
- const showUpsellIcon = $helpers.shouldShowUpsellIcon()
- const learnStep = util.getLearnStep(report)

.builder-container.contextual-menu(
  class=util.learnClasses({
    disabledSteps: [`choose-event`],
    tooltipContainer: true,
    transitioning: learnTransitioningIn && [`compare-event`, `group-by`].includes(learnStep.name),
  })
)
  +insights-learn-tooltip(`compare-event`, `group-by`)
  .insights-new-control.new-query-builder(class={'pane-open': open})
    .control-buttons.add-control.insights-learn-emphasize
      button.add-button(
        class={'disable-add-button': showUpsellIcon}
        on={click: $helpers.clickedAdd}
      )
        svg-icon(attrs={icon: 'x'})
      if showUpsellIcon
        .upsell-icon
          svg-icon(attrs={icon: 'lighting-bolt'})
      if $helpers.shouldShowUpsellModal()
        .upsell-wrapper
          mp-upsell-popup(
            attrs={
              feature: `filter-levels`,
              open: $helpers.shouldShowUpsellModal(),
            }
            on={change: $helpers.closeUpsellModal}
          )
      if open
        input.control-label(
          hook={
            insert: $helpers.insertedInput,
          }
          on={
            click: $helpers.clickedInput,
            input: $helpers.changedSearch,
            keydown: $helpers.handleKeydown,
          }
          props={
            autoFocus: true,
            type: `text`,
            value: contextFilter,
          }
          style={
            width: 0,
            delayed: {width: ''},
            remove: {width: '0'},
          }
        )
          span.label-preposition= $helpers.getPreposition()
    .drop-menu
      mp-drop-menu(attrs={open} on={change: $helpers.menuChange})
        .new-pane-content(attrs={'slot-body': true})
          = $component.child(`builder-pane`, {attrs: {open}})
