- const open = $helpers.isPaneOpen()

.control-container
  .insights-new-control.new-query-builder(class={'pane-open': open})
    .control-buttons.edit-control.control-button-text
      if $helpers.isPresetRange()
        if open
          resize-input.control-label(
            attrs={
              autofocus: true,
              placeholder: $helpers.getLabel(),
            }
            props={
              type: `text`,
              value: contextFilter,
            }
            on={
              click: $helpers.clickedInput,
              input: $helpers.updatedInput,
              keydown: $helpers.handleKeydown,
            }
          )
        else
          .control-label
            .control-label-text(on={click: $helpers.clickedLabel})= $helpers.getLabel()
      else
        - const {from, to} = $helpers.getDates()
        if open && builderPane.fromFocused
          resize-date-input.control-label(
            attrs={
              autofocus: builderPane.fromFocused,
              'min-width': 80,
              'initial-input-value': builderPane.fromFocused ? contextFilter : ``,
            }
            props={
              type: `text`,
              value: from,
            }
            on={
              click: $helpers.clickedInput,
              input: $helpers.updatedFrom,
              change: $helpers.changedFrom,
              focus: $helpers.focusFrom,
              blur: $helpers.refocusFrom,
            }
            hook={
              postpatch: builderPane.fromFocused ? $helpers.focus : null,
            }
          )
        else
          .control-label
            .control-label-text(on={click: $helpers.clickedFromLabel})
              = util.formatDate(util.parseDate(from))
        .clause-language.preposition to
        if open && builderPane.toFocused
          resize-date-input.control-label(
            attrs={
              autofocus: builderPane.toFocused,
              'min-width': 80,
              'initial-input-value': builderPane.toFocused ? contextFilter : ``,
            }
            props={
              type: `text`,
              value: to,
            }
            on={
              click: $helpers.clickedInput,
              input: $helpers.updatedTo,
              change: $helpers.changedTo,
              focus: $helpers.focusTo,
              blur: $helpers.refocusTo,
            }
            hook={
              postpatch: builderPane.toFocused ? $helpers.focus : null,
            }
          )
        else
          .control-label
            .control-label-text(on={click: $helpers.clickedToLabel})
              = util.formatDate(util.parseDate(to))
    .drop-menu
      mp-drop-menu(attrs={open} on={change: $helpers.menuChange})
        .new-pane-content(attrs={'slot-body': true})
          = $component.child(`builder-pane`, {attrs: $helpers.getSelectionAttrs(open)})
