include ../mixins.jade

//- apply context filter to one or more resource types in
//- a single pane
mixin filtered-options-lists(lists)
  - let hasResults = false
  each listOptions in lists
    if listOptions.list.length
      - hasResults += true
      .builder-label= listOptions.label
      case listOptions.resourceType
        when `event`
          +event-list(listOptions.list, listOptions.itemOptions || {
            clickedEvent: $helpers.clickedEvent,
            hideLoader: true,
          })
        when `property`
          +property-list(listOptions.list, listOptions.itemOptions || {
            clickedProperty: $helpers.clickedProperty,
            hideLoader: true,
          })
  if !hasResults
    li.list-option.list-empty Your search returned no results

mixin generic-options-list-item(label, options)
  li.list-option.generic-list(
    class={
      [options.class]: true,
      'list-option-active': !!options.isActive,
      'list-option-alert': !!options.shouldShowSourceAlert,
      'list-option-upsell': !!options.shouldShowSourceUpsell,
    }
    on={
      click: options.onclick,
      mouseenter: () => $helpers.updateActiveIndex(options.index),
    }
  )
    +screen-option(label, {noIcon: true})
    if options.shouldShowSourceUpsell
      .upsell-icon
        svg-icon(attrs={icon: 'lighting-bolt'})
    if options.shouldShowSourceAlert
      .upsell-icon
        svg-icon(attrs={icon: 'alert'})
    +small-caret-icon()

mixin secondary-action-pill(label, options)
  .option-secondary-action.insights-learn-disabled.pill(on={click: options.onclick})
    span.secondary-label= label
    +small-caret-icon()

mixin event-list(events, options)
  ul.screen-options-list(
    class=util.extend({
      'show-loader': !options.hideLoader,
    }, util.learnClasses({
      disabledSteps: [`group-by`],
    }))
    on={scroll: $helpers.scrolledList}
  )
    - const selected = options.selected
    - const eventsSource = options.source === `events`
    each mpEvent in events
      - const renamedMpEvent = util.renameEvent(mpEvent.name)
      - const isSelected = eventsSource && mpEvent.name === selected
      li.list-option(
        attrs={title: mpEvent.name}
        class={
          'list-option-active': mpEvent.index == builderPane.activeIndex,
          'list-option-selected': isSelected,
          'insights-learn-disabled': util.isSpecialEvent(mpEvent),
        }
        on={
          click: isSelected ? null : () => options.clickedEvent(mpEvent),
          mouseenter: () => $helpers.updateActiveIndex(mpEvent.index),
        }
      )
        +screen-option(renamedMpEvent, {
          icon: util.getIconForEvent(mpEvent),
          matches: mpEvent.matches,
        })
        if options.showPill
          +secondary-action-pill('Properties', {
            onclick: ev => options.clickedEventProperties(ev, mpEvent),
          })

mixin property-list(properties, options)
  ul.screen-options-list(
    class=util.extend({
      'show-loader': !options.hideLoader,
    }, util.learnClasses({
      disabledSteps: [`choose-event`, `compare-event`],
    }))
    on={scroll: options.scrolledList}
  )
    - const selected = options.selected
    - const source = options.source
    if properties.length
      each property in properties
        - const label = util.renameProperty(property.name) || property.name
        - const isSelected = property.resourceType === source && property.name === selected
        li.list-option(
          class={
            'list-option-active': property.index == builderPane.activeIndex,
            'list-option-selected': isSelected,
            [property.type]: true,
          }
          on={
          click: (isSelected && property.type !== `datetime`) ? null : ev => options.clickedProperty(ev, property),
          mouseenter: () => $helpers.updateActiveIndex(property.index),

          }
        )
          +screen-option(label, {
            icon: property.icon || util.getIconForProperty(property),
            matches: property.matches,
          })
          if options.caret || (options.conditionalCaret && options.conditionalCaret(property, isSelected))
            +small-caret-icon()
    else
      if options.loading
        +pane-loader
      else
        li.list-option.list-empty= options.listEmptyMessage || `No properties available`

mixin property-screen-body(options)
  if options.resourceTypes
    .resource-type-control
      mp-toggle(
        attrs={square: true, small: true, selected: options.selectedResourceType}
        on={select: ev => options.clickedResourceType(ev.detail.selected)}
      )
        each type in options.resourceTypes
          mp-toggle-option(attrs={value: type})= util.formatResourceType(type)
      each type, index in options.resourceTypes
        - const upsell_type = $helpers.shouldShowSourceUpsell(type) ? `upsell` : `integrate`;
        .svg-icon-wrapper(
          class={
            [type]: true,
            [upsell_type]: true, 
          }
        )
          if $helpers.shouldShowSourceUpsell(type)
            svg-icon(attrs={ icon: 'lighting-bolt' })
          if $helpers.shouldShowSourceAlert(type)
            svg-icon(attrs={ icon: 'alert' })

  .screen-list-container.arrow-key-scrollable(on={scroll: options.scrolledList})
    - const propertySections = options.propertySections
    if !$helpers.shouldShowPropertySections()
      +upsell-pane(options.selectedResourceType, $helpers.shouldShowSourceUpsell(options.selectedResourceType))
    else
      each section, idx in propertySections
        if section.list.length
          if idx
            .builder-divider
          .builder-label= section.label
          +property-list(section.list, options)
      if !propertySections.length
        li.list-option.list-empty Your search returned no results

mixin screen-footer-button(label, options)
  - options = options || {}
  button.screen-footer(on={click: options.onclick})= label

mixin screen-option(label, options)
  - options = options || {}
  if !options.noIcon
    - const icon = options.icon
    .option-icon
      svg-icon(attrs={icon, empty: !icon})
  .option-label
    if options.matches
      +highlight-matches(options.matches)
    else
      span.label= label

mixin screen-title(title, options)
  - options = options || {}
  .screen-title
    if options.upsell
      .upsell-header
        svg-icon(attrs={icon: 'lighting-bolt'})
        .upsell-text= title
        a.upsell-text.upgrade-link(attrs={href: '/pricing', target: '_blank'})= options.upsellLinkText
    else
      if title
        .title-label(attrs={title})= title
    block
    if options.backButton && builderPane.screens.length > 1
      .title-button.back-button(on={click: $helpers.clickedBackButton})
        svg-icon(attrs={icon: 'caret-left'})
    if options.closeButton
      .title-button.close-button(on={click: $helpers.closePane})
        svg-icon(attrs={icon: 'x'})

mixin small-caret-icon(options)
  - options = options || {}
  .caret-icon.small-caret
    svg-icon(attrs={icon: `caret-${options.direction || 'right'}`})

mixin pane-loader()
  .loading-properties
    mp-spinner

mixin upsell-pane(resource_type, project_has_resource)
  - const options = $helpers.getUpsellOptions(resource_type, project_has_resource)
  - const upsell_type = project_has_resource ? `upsell` : `integrate`;

  .upsell-pane-content
    .upsell-image(class={
      [resource_type]: true,
      [upsell_type]: true,
    })
      svg-icon(attrs={ icon: (project_has_resource ? 'lighting-bolt' : 'alert') })

    .upsell-message
      .title=options.upsellTitle
      a.upsell-text.upsell-link(
        attrs={ href: options.upsellLink, target: '_blank' }
        class={ [upsell_type]: true }
      )=options.upsellText.linkText
      span.upsell-text=options.upsellText.closingText

