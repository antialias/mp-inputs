- const fullWidthTable = columnHeaders.length && columnRows.length
- const isRelativeValue = displayOptions.value === 'relative'

.table-chart(class={'full-width': fullWidthTable})
  table-manager(props={data: {headers, rows, columnHeaders, columnRows, displayOptions}})
  .left-table-container
    .fixed-header.chart-header-container
      each header, idx in headers
        .fixed-header-cell(on={click: () => $helpers.clickHeader('left', idx, header)})
          span= $helpers.renameSeriesHeader(header)
          .sort-arrows(class=$helpers.leftSortArrowClasses(idx))
            svg-icon.triangle-up(attrs={icon: 'triangle-up'})
            svg-icon.triangle-down(attrs={icon: 'triangle-down'})
    .left-table
      table
        thead
          tr.chart-header-container
            each header in headers
                th= $helpers.renameSeriesHeader(header)
        tbody
          -let firstColIdx = 0
          each row in rows
            tr
              each cell, cellIdx in row
                - const isFirstCol = cellIdx === 0;
                if cell
                  - const value = $helpers.renameSeriesValue(cell.value, headers[cellIdx])
                  td(
                    class={
                      'first-column-cell': isFirstCol,
                      'even': isFirstCol && firstColIdx++ % 2,
                    }
                    props={
                      rowSpan: cell.rowSpan || 1,
                      title: value,
                    }
                  )= value

  if fullWidthTable
    .right-table-container
      .fixed-header.chart-header-container
        each header, idx in columnHeaders
          .fixed-header-cell(on={click: () => $helpers.clickHeader('right', idx, header.value)})
            span= header.display
            .sort-arrows(class=$helpers.rightSortArrowClasses(header.value))
              svg-icon.triangle-up(attrs={icon: 'triangle-up'})
              svg-icon.triangle-down(attrs={icon: 'triangle-down'})

      .right-table
        table
          thead
            tr.chart-header-container
              each header in columnHeaders
                th= header.display
          tbody
            each row in columnRows
              tr
                - const segmentMax = singleValueColumnSum ? singleValueColumnSum : util.sum(row.filter(val => val))
                each cell in row
                  if cell || cell === 0
                    - let cellValue = cell.value || cell
                    if isRelativeValue
                      - percent = util.formatPercent(cellValue / segmentMax)
                      - cellValue = percent === '0%' ? '< 0.01%' : percent
                    if cellValue >= 1000
                      - cellValue = util.commaizeNumber(cellValue)
                    td(props={rowSpan: cell.rowSpan || 1})= cellValue
                  else
                    td
