- const hasLegend = $helpers.showLegend();
.chart(class={
  [`${report.displayOptions.chartType}-chart-type`]: !$helpers.isEmptyResult(),
  'has-legend': hasLegend,
  'sticky-chart-headers': $helpers.isChartHeaderSticky(),
})
  .main-chart
    if $helpers.isLoading()
      .chart-loader
        .chart-header-container
          .header-text-container
            .header-text
          .header-icon
            svg-icon(attrs={icon: 'ellipsis'})
        .chart-graph
          mp-spinner
    else if $helpers.isNoDataProject()
      .chart-loader.error-no-data
        .chart-header-container
          .header-text-container
          .header-icon
        .chart-graph
          .chart-error-data-image
          .chart-error-no-data-text We don't have any data for your project.
    else if $helpers.isEmptyResult()
      .error-no-data
        .chart-graph
          .chart-error-data-image
          .chart-error-no-data-text We couldn't find any data for your query.
    else if $helpers.isBarChart()
      .extras-menu-container.chart-control= $component.child('extras-menu')
      bar-chart(
        props={
          chartData: $helpers.processResult(result),
        }
        attrs=$helpers.stringifyObjValues({
          'source': $helpers.getSelectedSource(),
          'segment-color-map': report.legend.colorMap,
          'chart-label': $helpers.getChartLabel(),
          'display-options': $helpers.getDisplayOptions(),
          'sorting': report.sorting.bar,
          'legend-change-id': report.legend.changeID,
          'sticky-header': util.pick(stickyHeader, [`isSticky`,`chartWidth`, `windowScrollLeft`, `chartOffsetLeft`]),
        })
        on={
          change: $helpers.barChartChange,
        }
        hook={
          insert: $helpers.barChartInserted,
          destroy: $helpers.barChartDestroyed,
        }
      )
    else if $helpers.isLineChart()
      .extras-menu-container.chart-control= $component.child('extras-menu')
      line-chart(
        props={
          chartData: $helpers.processResult(result, {flattenedData: true}),
          utcOffset: $helpers.getUtcOffset(),
        }
        attrs=$helpers.stringifyObjValues({
          'chart-label': $helpers.getChartLabel(),
          'display-options': $helpers.getDisplayOptions(),
          'seg-filters': report.legend.getFlattenedFilters(),
          'segment-color-map': report.legend.flattenedColorMap,
        })
      )
    else if $helpers.isTableChart()
      - const resourceDescription = $helpers.getChartLabel();
      table-chart(
        props={
          chartData: util.extend($helpers.processResult(result), {resourceDescription}),
        }
        attrs=$helpers.stringifyObjValues({
          'source': $helpers.getSelectedSource(),
          'display-options': $helpers.getDisplayOptions(),
          'sorting': report.sorting.table,
        })
        on={
          change: $helpers.tableChange,
        }
      )
  if hasLegend
    .legend.insights-learn-manipulate-data-disabled(
      style=$helpers.getLegendStyle()
    )= $component.child('chart-legend')
