- const isStacked = displayOptions.plotStyle === 'stacked'
- const isLogarithmic = displayOptions.analysis === 'logarithmic'
- const isValueAbsolute = displayOptions.value === 'absolute'

mixin tooltip(className, shouldHaveClass, title, count, percent)
  .hover-label(
    style={
      left: `${hoverTooltip.leftPos}px`,
      top: `${hoverTooltip.topPos}px`,
    }
    hook={insert: $helpers.insertedTooltip}
  )
    .content
      .title(
        attrs={title}
        class={[className]: shouldHaveClass}
      )= title
      .results
        .absolute
          .count= util.commaizeNumber(count)
        .percent= util.formatPercent(percent)

mixin chart-bar(options={})
  - const widthStyle = {width: util.formatPercent(options.width)}
  li.chart-bar(
    style=isStacked ? widthStyle : {}
    on=options.on
  )
    .bar-color.show-tool-tip-on-hover(
      class=options.colorClass
      style=isStacked ? {} : widthStyle
    )
      .label-wrapper
        .bar-text-nudger
        .label= options.label
    if options.outsideLabel && options.width < .5
      .label-wrapper.outside-label()
        .outside-label-wrapper(
          style=isStacked ? {} : widthStyle
        )
          .bar-text-nudger
          .label.show-tool-tip-on-hover(
            class=options.colorClass
          )= options.label
    if block
      block

.bar-chart(class={'sticky-chart-headers': stickyHeader.isSticky})
  table
    thead(style=$helpers.getHeaderStyle())
      tr
        th(props={colSpan: 0})
          .insights-bar-chart-header
            = $component.child('insights-bar-chart-header', {on: {change: $helpers.sortChange}})
    tbody
      - const singleRowData = rows.length == 1
      each row, rowIndex in rows
        - const rowIsKeyValuePair = row.length == 2
        - const addTopLevelKey = singleRowData && rowIsKeyValuePair && isStacked
        - const isMultiColor = row.length > 2 || isStacked
        - const lastCellIdx = row.length - 1
        - const segmentSum = util.sum(row[lastCellIdx])
        tr
          each cell, cellIndex in row
            if cell
              - const headersToDisplay = $helpers.headersToDisplay()
              if cellIndex < lastCellIdx
                - const colHeader = headersToDisplay[cellIndex]
                - const headerText = headersToDisplay[cellIndex] === '$event' ? 'Events' : util.renameProperty(headersToDisplay[cellIndex])
                if !Array.isArray(cell) || !isStacked || addTopLevelKey
                  td.chart-header(
                    attrs={rowSpan: cell.rowSpan || 1}
                    style={'min-width': `${$helpers.getHeaderWidth(headerText)}px`}
                  )
                    if !Array.isArray(cell) || isStacked
                      - const cellValue = addTopLevelKey ? $helpers.renameSeriesHeader(headers[0]) : cell.value;
                      - const title = $helpers.renameSeriesValue(colHeader, cellValue)
                      .chart-header-text(attrs={title})= title
                    else
                      ul
                        each value, valueIndex in cell
                          - const title = $helpers.renameSeriesValue(colHeader, value)
                          li.cell-label-container(
                            attrs={title}
                            on={
                              mouseenter: ev => $helpers.mousedOverSegment(ev, rowIndex, title),
                              mousemove: ev => $helpers.mousedOverSegment(ev, rowIndex, title),
                              mouseleave: $helpers.onMouseLeave,
                            }
                          )
                            .label
                              span.label-text.show-tool-tip-on-hover= title
                            if hoverTooltip.showTooltip && hoverTooltip.rowIdx === rowIndex && hoverTooltip.cellIdx === title
                              - const segmentColorClassName = `segment-color-${segmentColorMap[value]}`
                              - const count = row[lastCellIdx][valueIndex]
                              - const percent = (count / segmentSum) || 0
                              +tooltip(segmentColorClassName, isMultiColor, title, count, percent)
              else
                td.chart-data
                  .chart-grid
                    - const numOfGridLines = 8
                    each _ in Array(numOfGridLines).fill()
                      .grid-line
                  ul(class={stacked: isStacked})
                    - const segmentCell = isLogarithmic ? cell.map(value => Math.log10(value)) : cell
                    - let segmentMax
                    if isValueAbsolute
                      - segmentMax = isLogarithmic ? Math.log10(chartMax) : chartMax
                    else
                      if isStacked
                        - segmentMax = util.sum(segmentCell)
                      else
                        - segmentMax = Math.max(...segmentCell)
                    each value, valueIndex in cell
                      - const percent = (value / segmentSum) || 0
                      - const percentValueString = util.formatPercent(percent)
                      - const widthAsPercentage = ((isLogarithmic ? Math.log10(value) : value) / segmentMax) || 0
                      - const segmentName = row[cellIndex - 1][valueIndex];
                      - const formattedSegmentName = $helpers.renameSeriesValue(headersToDisplay[cellIndex - 1], segmentName)
                      - const segmentColorClassName = `segment-color-${segmentColorMap[segmentName]}`
                      +chart-bar({
                        outsideLabel: !isStacked,
                        colorClass: {[isMultiColor ? segmentColorClassName : `not-multi-color`]: true},
                        label: isValueAbsolute ? util.abbreviateNumber(value) : percentValueString,
                        on:{
                          mouseenter: ev => $helpers.mousedOverSegment(ev, rowIndex, valueIndex),
                          mousemove: ev => $helpers.mousedOverSegment(ev, rowIndex, valueIndex),
                          mouseleave: $helpers.onMouseLeave,
                        },
                        width: widthAsPercentage,
                      })
                        if hoverTooltip.showTooltip && hoverTooltip.rowIdx === rowIndex && hoverTooltip.cellIdx === valueIndex
                          +tooltip(segmentColorClassName, isMultiColor, formattedSegmentName, value, percent)
