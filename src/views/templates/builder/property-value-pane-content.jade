- const selectedProperty = state.stageClause && state.stageClause.value;
- const selectedType = state.stageClause && state.stageClause.filterType;
- const selectedOperator = state.stageClause && state.stageClause.filterOperator;
- const selectedValue = state.stageClause && state.stageClause.filterValue;
- const selectedDateUnit = state.stageClause && state.stageClause.filterDateUnit;

.pane-content-view(class=[elementClass, selectedType ? `filter-type-${selectedType}` : ''])
  table.tabs
    tbody
      tr
        for typeChoice in constants.filterTypeChoices
          td(class=['type-' + typeChoice, typeChoice === selectedType ? 'selected' : ''])
            button(
              ev-click=() => helpers.updateStageClause({filterType: typeChoice, filterValue: null, filterSearch: null, editing: null})
            )= util.renamePropertyType(typeChoice)

  if selectedType

    // "operator" input - present on all panes

    if selectedType === 'boolean' || selectedType === 'list'
      .filter-operator-input= views.operatorToggle()
    else
      .filter-operator-input= views.operatorDropdown()

    // type-specific inputs

    if selectedType === 'string'
      if selectedOperator === 'equals' || selectedOperator === 'does not equal'
        if selectedValue && selectedValue.length
          .filter-string-equals-summary= `${selectedValue.length} selected`

        .filter-string-equals-search.search
          // TODO: we are required to recreate this input between panes switches because of 
          //       limitations of the focus-input; this shouldn't be necessary
          if state.isPaneActive
            focus-input(
              autoFocus=state.isPaneActive
              focusDelay=200
              type='text'
              value=state.stageClause.filterSearch
              ev-input=event => helpers.updateStageClause({filterSearch: event.target.value})
            )

        ul.filter-string-equals-choices
          for value in helpers.getValueMatches(state.stageClause.filterSearch)
            li(class=selectedValue && selectedValue.indexOf(value) !== -1 ? 'selected' : '')
              button(ev-click=() => helpers.toggleStringEqualsValueSelected(value))= util.renamePropertyValue(value)

      else if selectedOperator === 'contains' || selectedOperator === 'does not contain'
        .filter-value-input
          // TODO: we are required to recreate this input between panes switches because of 
          //       limitations of the focus-input; this shouldn't be necessary
          if state.isPaneActive
            focus-input(
              autoFocus=state.isPaneActive
              focusDelay=200
              type='text'
              value=selectedValue
              ev-input=event => helpers.updateStageClause({filterValue: event.target.value})
            )

          if selectedValue
            ul.filter-string-contains-matches
              for value in helpers.getValueMatches(selectedValue, selectedOperator === 'does not contain')
                li= util.renamePropertyValue(value)

    else if selectedType === 'number'
      if selectedOperator === 'is between'
        - const betweenStart = selectedValue ? selectedValue[0] : null;
        - const betweenEnd = selectedValue ? selectedValue[1] : null;
        .filter-value-input.filter-operator-between
          // TODO: we are required to recreate this input between panes switches because of 
          //       limitations of the focus-input; this shouldn't be necessary
          if state.isPaneActive
            focus-input(
              autoFocus=state.isPaneActive
              focusDelay=200
              type='number'
              value=betweenStart
              ev-input=event => helpers.updateStageClause({filterValue: [Number(event.target.value), betweenEnd]})
            )
          .connector and
          input(
            type='number'
            value=betweenEnd
            ev-input=event => helpers.updateStageClause({filterValue: [betweenStart, Number(event.target.value)]})
          )
      else
        .filter-value-input
          // TODO: we are required to recreate this input between panes switches because of 
          //       limitations of the focus-input; this shouldn't be necessary
          if state.isPaneActive
            focus-input(
              autoFocus=state.isPaneActive
              focusDelay=200
              type='number'
              value=selectedValue
              ev-input=event => helpers.updateStageClause({filterValue: Number(event.target.value)})
            )

    else if selectedType === 'datetime'
      if selectedOperator === 'was between' || selectedOperator === 'was on'
        - const from = selectedValue ? selectedValue[0] : null;
        - const to = selectedValue ? selectedValue[1] : null;
        .filter-value-input
          date-picker(
            value=JSON.stringify({from, to})
            ev-change=event => helpers.updateStageClause({filterValue: [new Date(event.target.value.from), new Date(event.target.value.to)]})
          )
      else
        .filter-value-input.filter-days-ago
          // TODO: we are required to recreate this input between panes switches because of 
          //       limitations of the focus-input; this shouldn't be necessary
          if state.isPaneActive
            focus-input(
              autoFocus=state.isPaneActive
              focusDelay=200
              type='number'
              value=selectedValue
              ev-input=event => helpers.updateStageClause({filterValue: Number(event.target.value)})
            )
          .filter-unit-input= views.dateUnitDropdown()
          .connector ago

    else if selectedType === 'list'
      .filter-value-input
        // TODO: we are required to recreate this input between panes switches because of 
        //       limitations of the focus-input; this shouldn't be necessary
        if state.isPaneActive
          focus-input(
            autoFocus=state.isPaneActive
            focusDelay=200
            type='text'
            value=selectedValue
            ev-input=event => helpers.updateStageClause({filterValue: event.target.value})
          )
