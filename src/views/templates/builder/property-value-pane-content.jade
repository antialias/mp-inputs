- const selectedProperty = state.editingClause && state.editingClause.value;

- const typeChoices = constants.filterTypeChoices;
- const selectedType = state.editingClause && state.editingClause.filterType;

- const operatorChoices = constants.filterOperatorChoices[selectedType];
- const selectedOperator = state.editingClause && state.editingClause.filterOperator;

- const valueChoices = state.editingClause && state.topPropertyValues;
- const selectedValue = state.editingClause && state.editingClause.filterValue;

div(class=elementClass)
  table.tabs
    tbody
      tr
        for filterType in typeChoices
          td(class=['type-' + filterType, filterType === selectedType ? 'selected' : ''])
            button(
              ev-click=() => helpers.updateClause(state.clauseIndex, {filterType})
            )= util.renamePropertyType(filterType)

  if selectedType
    if selectedType === 'boolean' || selectedType === 'list'
      .operator= views.operatorToggle({choices: operatorChoices, selected: selectedOperator})
    else
      .operator= views.operatorDropdown({open: state.editingClause.editingFilterOperator, choices: operatorChoices, selected: selectedOperator})

    if selectedType === 'string'
      if selectedOperator === 'equals' || selectedOperator === 'does not equal'
        if selectedValue && selectedValue.length
          .summary= `${selectedValue.length} selected`

        .search
          input(type='text' ev-input=event => helpers.updateClause(state.clauseIndex, {filterSearch: event.target.value}))

          ul
            for value in helpers.getValueMatches(state.editingClause.filterSearch)
              li(class=selectedValue && selectedValue.indexOf(value) !== -1 ? 'selected' : '')
                button(ev-click=() => helpers.toggleStringEqualsValueSelected(value))= value

      else if selectedOperator === 'contains' || selectedOperator === 'does not contain'
        .contains
          input(type='text' ev-input=event => helpers.updateClause(state.clauseIndex, {filterValue: event.target.value}))

          if selectedValue
            ul
              for value in helpers.getValueMatches(selectedValue, selectedOperator === 'does not contain')
                li= value
  //
    ul.column.resource-value
      if helpers.showPropertyValues()
        for filterValue, i in state.topPropertyValues
          if helpers.matchesSearch(filterValue)
            li(
              class=filterValue === selectedValue ? 'selected' : '',
              ev-click=() => helpers.updateClause(state.clauseIndex, {filterValue}),
            )= filterValue
