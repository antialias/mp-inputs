- const gridLineDistance = util.getTickDistance(state.chartMax);
- const gridLineWidth = gridLineDistance / state.chartMax * 100;
- const numGridLines = state.chartMax && gridLineDistance ? Math.floor(state.chartMax / gridLineDistance) : 0;
- const gridLines = new Array(numGridLines).fill(gridLineWidth);

div(class=elementClass)
  table
    thead
      tr
        th(colspan=0)
          irb-bar-chart-header(
            headers=JSON.stringify(state.headers)
            chartMax=JSON.stringify(state.chartMax)
          )
    tbody
      for row in state.rows
        tr
          for cell, i in row
            if cell
              if i + 1 < row.length
                td.chart-header(
                  rowSpan=state.rowSpans[i] || 1
                  style={'min-width': `${util.getTextWidth(util.renameProperty(state.headers[i]), 'bold 14px Helvetica')}px`}
                )
                  if Array.isArray(cell)
                    ul
                      for value in cell
                        if !i && !state.headers.length
                          li= util.renameEvent(value)
                        else
                          li= util.renamePropertyValue(value)
                  else
                    span= util.renamePropertyValue(cell)
              else
                td.chart-data
                  .chart-grid
                    for width in gridLines
                      .chart-line(style={width: `${width}%`})
                  ul
                    for value, i in cell
                      li.chart-bar(
                        class=value / state.chartMax < .06 ? 'narrow' : ''
                        style={width: `${value / state.chartMax * 100}%`}
                      )
                        .background(style={opacity: 1 - (0.6 * i / cell.length)})
                        .label= util.commaizeNumber(value)
