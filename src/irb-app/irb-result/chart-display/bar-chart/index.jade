- const isStacked = displayOptions.plotStyle === 'stacked'
- const isLogarithmic = displayOptions.analysis === 'logarithmic'
- const isValueAbsolute = displayOptions.value === 'absolute'

mixin tooltip(className, shouldHaveClass, title, count, percent)
  .hover-label(style={left: `${hoverTooltip.mouseXPos}px`})
    .content
      .title(
        attrs={title}
        class={[className]: shouldHaveClass}
      )= title
      .results
        .absolute
          .count= mp.utility.commaize(count)
        .percent= util.formatPercent(percent)

.bar-chart
  table
    thead
      tr
        th(props={colSpan: 0})
          .irb-bar-chart-header
            = $component.child('irb-bar-chart-header', {on: {change: $helpers.sortChange}})
    tbody
      each row, rowIndex in rows
        - const isMultiColor = row.length > 2 || isStacked
        tr
          each cell, cellIndex in row
            - const lastCellIdx = row.length - 1
            - const segmentSum = util.sum(row[lastCellIdx])
            if cell
              - const headersToDisplay = $helpers.headersToDisplay()
              if cellIndex < lastCellIdx
                - const colHeader = headersToDisplay[cellIndex]
                - const headerText = headersToDisplay[cellIndex] === '$event' ? 'Events' : util.renameProperty(headersToDisplay[cellIndex])

                if !Array.isArray(cell) || !isStacked || rows.length <= 1
                  td.chart-header(
                    attrs={rowSpan: cell.rowSpan || 1}
                    style={'min-width': `${$helpers.getHeaderWidth(headerText)}px`}
                  )
                    if !Array.isArray(cell) || isStacked
                      - const cellLabel = isStacked && rows.length == 1 ? showValueNames[0] : cell.value
                      - const title = $helpers.formatLabel(colHeader, cellLabel)
                      .chart-header-text(attrs={title})= title
                    else
                      ul
                        each value, valueIndex in cell
                          - const title = $helpers.formatLabel(colHeader, value)
                          li(
                            attrs={title}
                            on={
                              mouseenter: ev => $helpers.onMouseEnterAndMove(ev, rowIndex, title),
                              mousemove: ev => _.throttle($helpers.onMouseEnterAndMove(ev, rowIndex, title), 100),
                              mouseleave: $helpers.onMouseLeave,
                            }
                          )= title
                          if hoverTooltip.rowIdx === rowIndex && hoverTooltip.cellIdx === title
                            - const segmentColorClassName = `segment-color-${segmentColorMap[value]}`
                            - const count = row[lastCellIdx][valueIndex]
                            - const percent = count / segmentSum
                            +tooltip(segmentColorClassName, isMultiColor, title, count, percent)

              else
                td.chart-data
                  .chart-grid
                    each _ in Array(8).fill()
                      .grid-line
                  ul(class={stacked: isStacked})
                    - const segmentCell = isLogarithmic ? cell.map(value => Math.log10(value)) : cell
                    - let segmentMax
                    if isValueAbsolute
                      - segmentMax = isLogarithmic ? Math.log10(chartMax) : chartMax
                    else
                      if isStacked
                        - segmentMax = util.sum(segmentCell)
                      else
                        - segmentMax = Math.max(...segmentCell)
                    each value, valueIndex in cell
                      - const percent = value / segmentSum
                      - const percentValueString = util.formatPercent(percent)
                      - const widthAsPercentage = (isLogarithmic ? Math.log10(value) : value) / segmentMax
                      - const segmentName = $helpers.formatLabel(headersToDisplay[cellIndex - 1], row[cellIndex - 1][valueIndex])
                      - const segmentColorClassName = `segment-color-${segmentColorMap[segmentName]}`
                      li.chart-bar(
                        on={
                          mouseenter: ev => $helpers.onMouseEnterAndMove(ev, rowIndex, valueIndex),
                          mousemove: ev => _.throttle($helpers.onMouseEnterAndMove(ev, rowIndex, valueIndex), 100),
                          mouseleave: $helpers.onMouseLeave,
                        }
                      )
                        .bar-color(
                          class={[segmentColorClassName]: isMultiColor}
                          style={width: util.formatPercent(widthAsPercentage)}
                        )
                          .label-wrapper
                            .bar-text-nudger
                            .label= isValueAbsolute ? util.abbreviateNumber(value) : percentValueString
                        if widthAsPercentage < .5
                          .label-wrapper.outside-label
                            .outside-label-wrapper(
                              style={width: util.formatPercent(widthAsPercentage)}
                            )
                              .bar-text-nudger
                              .label= isValueAbsolute ? util.abbreviateNumber(value) : percentValueString
                        if hoverTooltip.rowIdx === rowIndex && hoverTooltip.cellIdx === valueIndex
                          +tooltip(segmentColorClassName, isMultiColor, segmentName, value, percent)
