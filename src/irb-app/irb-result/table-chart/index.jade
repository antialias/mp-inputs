- const fullWidthTable = columnHeaders.length && columnRows.length
- const isRelativeValue = displayOptions.value === 'relative'

.table-chart(class={'full-width': fullWidthTable})
  table-manager(data=JSON.stringify({headers, rows, columnHeaders, columnRows, displayOptions}))
  .left-table-container
    .fixed-header.chart-header-container
      for header, idx in headers
        .fixed-header-cell(onclick=() => $helpers.clickHeader('left', idx, header))
          span= header === '$event' ? 'Event' : util.renameProperty(header)
          .sort-arrows(class=$helpers.leftSortArrowClasses(idx))
    .left-table
      table
        thead
          tr.chart-header-container
            for header in headers
              th= util.renameProperty(header)
        tbody
          -let firstColIdx = 0
          for row in rows
            tr
              for cell, cellIdx in row
                -const isFirstCol = cellIdx === 0;
                if cell
                  - const value = headers[cellIdx] === '$event' ? util.renameEvent(cell.value) : util.renamePropertyValue(cell.value)
                  td(
                    class={
                      'first-column-cell': isFirstCol,
                      'even': isFirstCol && firstColIdx++ % 2,
                    }
                    rowSpan=cell.rowSpan || 1
                    title=value
                  )= value

  if fullWidthTable
    .right-table-container
      .fixed-header.chart-header-container
        for header, idx in columnHeaders
          .fixed-header-cell(onclick=() => $helpers.clickHeader('right', idx, header.value))
            span= header.display
            .sort-arrows(class=$helpers.rightSortArrowClasses(header.value))
      .right-table
        table
          thead
            tr.chart-header-container
              for header in columnHeaders
                th= header.display
          tbody
            for row in columnRows
              tr
                - const segmentMax = singleValueColumnSum ? singleValueColumnSum : util.sum(row.filter(val => val))
                for cell in row
                  if cell || cell === 0
                    - let cellValue = cell.value || cell
                    if isRelativeValue
                      - percent = util.formatPercent(cellValue / segmentMax)
                      - cellValue = percent === '0%' ? '< 0.01%' : percent
                    td(rowSpan=cell.rowSpan || 1)= cellValue
                  else
                    td
