- const isStacked = displayOptions.plotStyle == 'stacked';
- const isLogarithmic = displayOptions.analysis === 'logarithmic';
- const headersToDisplay = $helpers.headersToDisplay();

mixin sort-col-button(sortBy, sortOrder, colIdx)
  - const colConfig = sortConfig.sortBy === 'column' && sortConfig.colSortAttrs[colIdx];
  .sort-icon(
    class={
      [`sort-icon-${sortBy}-${sortOrder}`]: true,
      'sort-selected': colConfig && colConfig.sortBy === sortBy && colConfig.sortOrder === sortOrder,
    }
    onclick=() => $helpers.selectColumnSort(sortBy, sortOrder, colIdx)
  )

mixin sort-axis-button(sortOrder)
  .sort-icon(
    class={
      [`sort-icon-value-${sortOrder}`]: true,
      'sort-selected': sortConfig && sortConfig.sortBy === 'value' && sortConfig.sortOrder === sortOrder,
    }
    onclick=() => $helpers.selectAxisSort(sortOrder)
  )

.bar-chart
  table
    thead
      tr
        th(colSpan=0)
          irb-bar-chart-header(
            attributes={
              'chart-label': JSON.stringify(chartLabel),
              'chart-max': JSON.stringify(chartMax),
              'display-options': JSON.stringify(displayOptions),
              'function-label': JSON.stringify(functionLabel),
              'headers': JSON.stringify(headersToDisplay),
              'sort-config': JSON.stringify(sortConfig),
            }
            onclick=$helpers.headerClick
          )
    tbody
      tr
        for col, ci in headersToDisplay
          td.sort-holder(class={'active-sort-panel': ci === headerSortPanel})
            if !(isStacked && rows.length === 1)
              .sort-controls
                +sort-col-button('label', 'asc',  ci)
                +sort-col-button('label', 'desc', ci)
                +sort-col-button('value', 'asc',  ci)
                +sort-col-button('value', 'desc', ci)
        td.sort-holder(class={'active-sort-panel': headerSortPanel === 'axis'})
            .sort-controls
              if isStacked
                - const colIdx = rows.length > 1 ? headersToDisplay.length : 0;
                +sort-col-button('label', 'asc',  colIdx)
                +sort-col-button('label', 'desc', colIdx)
                +sort-col-button('value', 'asc',  colIdx)
                +sort-col-button('value', 'desc', colIdx)
              else
                +sort-axis-button('asc')
                +sort-axis-button('desc')
      for row, i in rows
        tr
          for cell, j in row
            if cell
              if j < row.length - 1
                - const headerText = headersToDisplay[j] === '$event' ? 'Events' : util.renameProperty(headersToDisplay[j]);
                - const getLabel = value => headersToDisplay[j] === '$event' ? util.renameEvent(value) : util.renamePropertyValue(value);

                if !(Array.isArray(cell) && isStacked && rows.length > 1)
                  td.chart-header(
                    rowSpan=cell.rowSpan || 1
                    style={'min-width': `${$helpers.getHeaderWidth(headerText)}px`}
                  )
                    if !Array.isArray(cell) || isStacked
                      - const cellLabel = isStacked && rows.length == 1 ? showValueNames[0] : cell.value
                      .chart-header-text(title=getLabel(cellLabel))= getLabel(cellLabel)
                    else
                      ul
                        for value in cell
                          li(title=getLabel(value))= getLabel(value)

              else
                td.chart-data
                  .chart-grid
                    each _ in Array(5).fill()
                      .grid-line
                  ul(class={stacked: isStacked})
                    - const cellValuesSum = util.sum(cell)
                    - const cellValuesMax = Math.max(...cell)
                    for value, k in cell
                      - let segmentMax = chartMax
                      if displayOptions.value === 'relative'
                        if isStacked
                          - segmentMax = cellValuesSum
                        else
                          - segmentMax = cellValuesMax
                      - const percent = isLogarithmic ? Math.log10(value) / Math.log10(segmentMax) : value / segmentMax;
                      - const percentValueString = `${Math.floor(percent * 10000) / 100}%`;
                      - const segmentName = row[j - 1][k]
                      li.chart-bar(
                        style={width: percentValueString}
                        onmouseenter=(ev) => $helpers.onMouseEnter(ev, segmentName, value, percentValueString)
                        onmouseleave=$helpers.onMouseLeave
                      )
                        .background(class=`background-color-${(k % 8) + 1}`)
                        if value / chartMax > .06
                          .label= util.abbreviateNumber(value)

  //- For the hover tool tip to break out of the scroll overflow we are manually calculating where it should be on the screen.
  //- TODO When we change how scrolling works for results: place a tooltip on each li.chart-bar and use CSS to show/hide.
  if hoverTooltip.show
    .hover-label(
      style={top: hoverTooltip.cssTop, left: hoverTooltip.cssLeft}
      onmouseenter=$helpers.onMouseEnter
      onmouseleave=$helpers.onMouseLeave
    )
      .content
        .title= hoverTooltip.name
        .results
          .count= hoverTooltip.value
          .percent= hoverTooltip.percent
