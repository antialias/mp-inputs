- const isStacked = displayOptions.plotStyle === 'stacked'
- const isLogarithmic = displayOptions.analysis === 'logarithmic'
- const isValueAbsolute = displayOptions.value === 'absolute'
- const headersToDisplay = $helpers.headersToDisplay()

.bar-chart
  table
    thead
      tr
        th(colSpan=0)
          irb-bar-chart-header(
            attributes={
              'chart-label': JSON.stringify(chartLabel),
              'chart-max': JSON.stringify(chartMax),
              'display-options': JSON.stringify(displayOptions),
              'function-label': JSON.stringify(functionLabel),
              'headers': JSON.stringify(headersToDisplay),
              'sort-config': JSON.stringify(sortConfig),
            }
            onchange=$helpers.sortChange
          )
    tbody
      for row, i in rows
        - const isMultiColor = row.length > 2 || isStacked
        tr
          for cell, j in row
            if cell
              if j < row.length - 1
                - const headerText = headersToDisplay[j] === '$event' ? 'Events' : util.renameProperty(headersToDisplay[j])
                - const getLabel = value => headersToDisplay[j] === '$event' ? util.renameEvent(value) : util.renamePropertyValue(value)

                if !Array.isArray(cell) || !isStacked || rows.length <= 1
                  td.chart-header(
                    rowSpan=cell.rowSpan || 1
                    style={'min-width': `${$helpers.getHeaderWidth(headerText)}px`}
                  )
                    if !Array.isArray(cell) || isStacked
                      - const cellLabel = isStacked && rows.length == 1 ? showValueNames[0] : cell.value
                      .chart-header-text(title=getLabel(cellLabel))= getLabel(cellLabel)
                    else
                      ul
                        for value in cell
                          li(title=getLabel(value))= getLabel(value)

              else
                td.chart-data
                  .chart-grid
                    each _ in Array(8).fill()
                      .grid-line
                  ul(class={stacked: isStacked})
                    - const segmentCell = isLogarithmic ? cell.map(value => Math.log10(value)) : cell
                    - let segmentMax
                    if isValueAbsolute
                      - segmentMax = isLogarithmic ? Math.log10(chartMax) : chartMax
                    else
                      if isStacked
                        - segmentMax = util.sum(segmentCell)
                      else
                        - segmentMax = Math.max(...segmentCell)
                    for value, k in cell
                      - const percent = isLogarithmic ? (Math.log10(value) / segmentMax) : (value / segmentMax)
                      - const percentValueString = util.formatPercent(percent)
                      - const segmentName = row[j - 1][k]
                      - const segmentColorClassName = `segment-color-${segmentColorMap[segmentName]}`
                      li.chart-bar(
                        style={width: percentValueString}
                        onmouseenter=ev => $helpers.onMouseEnter(ev, i, k)
                        onmouseleave=$helpers.onMouseLeave
                      )
                        if hoverTooltip.rowIdx === i && hoverTooltip.cellIdx === k
                          .hover-label
                            .content
                              .title(class={[segmentColorClassName]: isMultiColor})= segmentName
                              .results
                                .absolute
                                  .count= value
                                .percent= percentValueString
                        .bar-color(class={[segmentColorClassName]: isMultiColor})
                        .label-wrapper
                          .bar-text-nudger
                          .label= isValueAbsolute ? util.abbreviateNumber(value) : percentValueString
