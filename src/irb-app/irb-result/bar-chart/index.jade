- const isStacked = chartOptions.plotStyle == 'stacked';
- const neededHeaders = $helpers.neededHeaders();

.bar-chart
  table
    thead
      tr
        th(colSpan=0)
          irb-bar-chart-header(
            attributes={
              chartMax: JSON.stringify(chartMax),
              headers: JSON.stringify(neededHeaders),
              mathTypes: JSON.stringify(mathTypes),
              showValueNames: JSON.stringify(showValueNames),
            }
          )
    tbody
      for row, i in rows
        tr
          for cell, j in row
            if cell
              if j < row.length - 1
                - const headerText = neededHeaders[j] === '$event' ? 'Events' : util.renameProperty(neededHeaders[j]);
                - const getLabel = value => neededHeaders[j] === '$event' ? util.renameEvent(value) : util.renamePropertyValue(value);

                if !(Array.isArray(cell) && isStacked && rows.length > 1)
                  td.chart-header(
                    rowSpan=cell.rowSpan || 1
                    style={'min-width': `${$helpers.getHeaderWidth(headerText)}px`}
                  )
                    if !Array.isArray(cell) || isStacked
                      - const cellLabel = isStacked && rows.length == 1 ? showValueNames[0] : cell.value
                      span(title=getLabel(cellLabel))= getLabel(cellLabel)
                    else
                      ul
                        for value in cell
                          li(title=getLabel(value))= getLabel(value)

              else
                td.chart-data
                  .chart-grid
                    - const numOfGridlines = 4
                    - let gridNumber = 0
                    while gridNumber < (numOfGridlines + 1)
                      .grid-line(class=gridNumber++)
                  ul(class={stacked: isStacked})
                    for value, k in cell
                      - const percentValueString = `${Math.floor(value / chartMax * 10000) / 100}%`
                      - const segmentName = row[j - 1][k]
                      li.chart-bar(
                        style={width: percentValueString}
                        onmouseenter=(ev) => $helpers.onMouseEnter(ev, segmentName, value, percentValueString)
                        onmouseleave=$helpers.onMouseLeave
                      )
                        .background(class=`background-color-${(k % 8) + 1}`)
                        if value / chartMax > .06
                          .label= util.abbreviateNumber(value)
  if hoverTooltip.show
    .hover-label(
      style={top: hoverTooltip.cssTop, left: hoverTooltip.cssLeft}
      onmouseenter=() => $helpers.onMouseEnter()
      onmouseleave=$helpers.onMouseLeave
    )
      .content
        .title= hoverTooltip.name
        .results
          .count= hoverTooltip.value
          .percent= hoverTooltip.percent
