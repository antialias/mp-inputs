mixin pane(paneComponent, isPaneActive, paneIndex)
  - const paneConstants = Object.assign({}, $component.constants, ($component.constants.panes && $component.constants.panes[paneIndex]) || {});
  - const paneHelpers = Object.assign({}, $helpers, ($helpers.panes && $helpers.panes[paneIndex]) || {});

  - const header = paneConstants.header || paneHelpers.getHeader && paneHelpers.getHeader();
  - const commitLabel = paneConstants.commitLabel || paneHelpers.getCommitLabel && paneHelpers.getCommitLabel();
  - const commitHandler = paneHelpers.commitHandler;

  if header
    .header
      span= header
      if paneIndex
        button.back(onclick=() => $helpers.updateStageClause({paneIndex: paneIndex - 1}))

  if paneConstants.search !== false && $component.constants.search !== false
    .search
      // TODO: we are required to recreate this input between panes switches because of
      //       limitations of the focus-input; this shouldn't be necessary
      if isPaneActive
        focus-input(autoFocus=isPaneActive type='text' oninput=event => $helpers.updateStageClause({search: event.target.value}))

  if paneComponent.content
    .content= TODO
    //- .content= paneComponent.content(Object.assign(state, {isPaneActive}))

  if commitLabel && commitHandler
    button.commit(onclick=commitHandler)= commitLabel

.pane-view
  if $component.subpanes
    - const activePaneIndex = (stageClause && stageClause.paneIndex) || 0;
    - console.log('TODO SUBPANES')

    //- for subpane, paneIndex in $component.subpanes
    //-   .pane(style={
    //-     '-webkit-transform': `translateX(${(paneIndex - activePaneIndex) * 400}px)`,
    //-     transform: `translateX(${(paneIndex - activePaneIndex) * 400}px)`,
    //-   })
    //-     +pane(subpane, paneIndex === activePaneIndex, paneIndex)
  else
    .pane.active
        +pane($component, true)
