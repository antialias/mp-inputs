mixin paneContent(contentData, isPaneActive, paneIndex)
  - const paneConstants = Object.assign({}, $component.constants, contentData.constants || {});
  - const paneHelpers = Object.assign({}, $helpers, contentData.helpers || {});

  - const header = paneConstants.header || paneHelpers.getHeader && paneHelpers.getHeader();
  - const commitLabel = paneConstants.commitLabel || paneHelpers.getCommitLabel && paneHelpers.getCommitLabel();
  - const commitHandler = paneHelpers.commitHandler;

  if header
    .header
      span= header
      if paneIndex
        button.back(onclick=$helpers.backButtonHandler)

  if paneConstants.search !== false && $component.constants.search !== false
    .search
      //- TODO: we are required to recreate this input between panes switches because of
      //-       limitations of the focus-input; this shouldn't be necessary
      if isPaneActive
        focus-input(
          autoFocus=isPaneActive
          focusDelay=200
          oninput= $helpers.searchHandler
          type='text'
        )

  .content= $component.child(contentData.tag, {attributes: {'is-pane-active': isPaneActive}})

  if commitLabel && commitHandler
    button.commit(onclick=commitHandler)= commitLabel

.pane-view
  if $component.subpanes
    - const activePaneIndex = $helpers.activePaneIndex()
    for subpane, paneIndex in $component.subpanes
      .pane(style={
        '-webkit-transform': `translateX(${(paneIndex - activePaneIndex) * 400}px)`,
        transform: `translateX(${(paneIndex - activePaneIndex) * 400}px)`,
      })
        +paneContent(subpane, paneIndex === activePaneIndex, paneIndex)
  else
    .pane.active
        +paneContent({tag: `${$component.section}-pane-content`}, true)
