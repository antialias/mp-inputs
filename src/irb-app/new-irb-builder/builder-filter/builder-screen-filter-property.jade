include ../../mixins.jade
include ../mixins.jade

mixin filter-dropdown(name, title, icon)
  div(class={[`filter-${name}-dropdown`]: true})
    button.filter-menu-button(on={click: () => $helpers.toggleMenu(name)})
      span.button-flex-wrapper
        svg-icon(attrs={icon, empty: !icon})
        span.filter-prop-name= title
        svg-icon(attrs={icon: 'caret-down'})
    .filter-menu
      mp-drop-menu(
        attrs={open: $helpers.isMenuOpen(name)}
        on={change: ev => $helpers.menuChange(ev, name)}
      )
        block

mixin filter-operator-dropdown
  +filter-dropdown('operator', clause.filterOperator)
    ul.filter-operators
      each filterOperator in $helpers.filterOperators(clause.filterType)
        li.filter-menu-item(
          class={'filter-menu-item-selected': filterOperator === clause.filterOperator}
          on={click: () => $helpers.chooseFilterOperator(filterOperator)}
        )
          = filterOperator

mixin filter-string-input
  .filter-string-input-wrapper
    input.filter-string-input(
      props={
        type: 'text',
        value: clause.filterValue,
      }
      on={
        input: ev => $helpers.updateFilterValue(ev.target.value),
      }
      hook={
        insert: vnode => vnode.elm.focus(),
      }
    )

mixin filter-number-input(value, oninput, options)
  .filter-number-input-wrapper
    input.filter-number-input(
      props={
        type: 'text',
        value,
      }
      on={
        input: oninput,
      }
      hook=options.autofocus ? {insert: vnode => vnode.elm.focus()} : {}
      key=options.key
    )


- const clause = $helpers.getActiveClause()

.builder-screen.filter-property
  +screen-title('', {backButton: true})
    +filter-dropdown('type', util.renameProperty(clause.value), util.getIconForPropertyType(clause.filterType))
      ul.filter-types
        each filterType in $helpers.FILTER_TYPES
          li.filter-menu-item(
            class={'filter-menu-item-selected': filterType.name === clause.filterType}
            on={click: () => $helpers.chooseFilterType(filterType.name)}
          )
            svg-icon(attrs={icon: filterType.icon})
            = filterType.name

  .filter-chooser
    case clause.filterType

      when `string`
        +filter-operator-dropdown
        case clause.filterOperator
          when `equals`
          when `does not equal`
            //- TODO search goes here
            .screen-list-container
              ul.filter-string-equals-choices
                +checkbox-select-all(
                  $helpers.allEqualsValuesSelected(),
                  $helpers.toggleAllFilterValues
                )
                each value in $helpers.getEqualsMatches()
                  +checkbox-item(
                    util.renamePropertyValue(value),
                    value,
                    clause.filterValue && clause.filterValue.indexOf(value) !== -1,
                    $helpers.toggleStringEqualsValueSelected
                  )

          when `contains`
          when `does not contain`
            +filter-string-input
            ul.filter-string-contains-choices
              each value in $helpers.getContainsMatches()
                li.string-contains-match= value

      when `number`
        +filter-operator-dropdown
        if clause.filterOperator === `is between`
          - const [start, end] = clause.filterValue || [null, null]
          .filter-number-between
            +filter-number-input(
              start,
              ev => $helpers.updateFilterValue([Number(ev.target.value), end]),
              {autofocus: true, key: `num-start`}
            )
            span and
            +filter-number-input(
              end,
              ev => $helpers.updateFilterValue([start, Number(ev.target.value)]),
              {autofocus: false, key: `num-end`}
            )
        else
          .filter-number
            +filter-number-input(
              clause.filterValue,
              ev => $helpers.updateFilterValue(Number(ev.target.value)),
              {autofocus: true, key: `num-val: ${clause.filterOperator}`}
            )

      when `boolean`
        .filter-radio-list.filter-boolean
          .radio-button(
            class={'radio-selected': clause.filterOperator === `is true`}
            on={click: () => $helpers.chooseFilterOperator(`is true`)}
          ) True
          .radio-button(
            class={'radio-selected': clause.filterOperator === `is false`}
            on={click: () => $helpers.chooseFilterOperator(`is false`)}
          ) False

      when `list`
        .filter-radio-list.filter-list
          .radio-button(
            class={'radio-selected': clause.filterOperator === `contains`}
            on={click: () => $helpers.chooseFilterOperator(`contains`)}
          ) Contains
          .radio-button(
            class={'radio-selected': clause.filterOperator === `does not contain`}
            on={click: () => $helpers.chooseFilterOperator(`does not contain`)}
          ) Does not contain
        +filter-string-input

      default
        +filter-operator-dropdown
        p this is #{clause.filterType}

  +screen-footer-button('Add filter', {onclick: $helpers.commitFilter})
