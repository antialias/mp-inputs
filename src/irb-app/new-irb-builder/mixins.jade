include ../mixins.jade

//- apply context filter to one or more resource types in
//- a single pane
mixin filtered-options-lists(lists)
  each listOptions in lists
    if listOptions.list.length
      .builder-label= listOptions.label
      case listOptions.resourceType
        when `event`
          +event-list(listOptions.list, listOptions.itemOptions || {
            clickedEvent: $helpers.clickedEvent,
            hideLoader: true,
          })
        when `property`
          +property-list(listOptions.list, listOptions.itemOptions || {
            clickedProperty: $helpers.clickedProperty,
            hideLoader: true,
          })

mixin generic-options-list-item(label, options)
  li.list-option.generic-list(
    class={[options.class]: true}
    on={click: options.onclick}
  )
    +screen-option(label, {noIcon: true})
    +small-caret-icon()

mixin secondary-action-pill(label, options)
  .option-secondary-action.pill(on={click: options.onclick})
    span.secondary-label= label
    +small-caret-icon()

mixin event-list(events, options)
  ul.screen-options-list(
    class={'show-loader': !options.hideLoader}
    on={scroll: $helpers.scrolledList}
  )
    - const selected = options.selected
    - const eventsSource = options.source === `events`
    each mpEvent in events
      - const renamedMpEvent = util.renameEvent(mpEvent.name)
      - const isSelected = eventsSource && mpEvent.name === selected
      li.list-option(
        class={'list-option-selected': isSelected}
        on={click: isSelected ? null : () => options.clickedEvent(mpEvent)}
      )
        +screen-option(renamedMpEvent, {
          icon: util.getIconForEvent(mpEvent),
          matches: mpEvent.matches,
        })
        if options.showPill
          +secondary-action-pill('Properties', {
            onclick: ev => options.clickedEventProperties(ev, mpEvent),
          })

mixin property-list(properties, options)
  ul.screen-options-list(
    class={'show-loader': !options.hideLoader}
    on={scroll: options.scrolledList}
  )
    - const selected = options.selected
    - const source = options.source
    if properties.length
      each property in properties
        - const label = util.renameProperty(property.name) || property.name
        - const isSelected = property.resourceType === source && property.name === selected
        li.list-option(
          class={'list-option-selected': isSelected}
          on={click: isSelected ? null : ev => options.clickedProperty(ev, property)}
        )
          +screen-option(label, {
            icon: property.icon || util.getIconForProperty(property),
            matches: property.matches,
          })
          if options.caret
            +small-caret-icon()
    else
      if options.loading
        +pane-loader
      else
        li.list-option.list-empty no properties available

mixin resource-type-control(resourceTypes, options)
  .resource-type-control
    +tabs(resourceTypes.map(type => ({value: type, label: util.formatResourceType(type)})), options)

mixin property-screen-body(options)
  if options.resourceTypes
    +resource-type-control(options.resourceTypes, {
      selected: options.selectedResourceType,
      onclick: options.clickedResourceType,
    })
  .screen-list-container(on={scroll: options.scrolledList})
    if options.recentProperties.length
      .builder-label Recently viewed
      +property-list(options.recentProperties, options)
    .builder-divider
    .builder-label #{util.formatResourceType(options.selectedResourceType)} properties
    +property-list(options.properties, options)

mixin screen-footer-button(label, options)
  - options = options || {}
  button.screen-footer(on={click: options.onclick})= label

mixin screen-option(label, options)
  - options = options || {}
  if !options.noIcon
    - const icon = options.icon
    .option-icon
      svg-icon(attrs={icon, empty: !icon})
  .option-label
    if options.matches
      +highlight-matches(options.matches)
    else
      span.label= label

mixin screen-title(title, options)
  - options = options || {}
  .screen-title
    if title
      .title-label(attrs={title})= title
    block
    if options.backButton && builderPane.screens.length > 1
      .title-button.back-button(on={click: $helpers.clickedBackButton})
        svg-icon(attrs={icon: 'caret-left'})
    if options.closeButton
      .title-button.close-button(on={click: $helpers.closePane})
        svg-icon(attrs={icon: 'x'})

mixin small-caret-icon(options)
  - options = options || {}
  .caret-icon.small-caret
    svg-icon(attrs={icon: `caret-${options.direction || 'right'}`})

mixin pane-loader()
  .loading-properties
    mp-spinner
